{"version":3,"sources":["library/styled-bs-grid/index.ts","config/grid.ts","views/App/setup.tsx","utils/format/index.ts","views/App/App.tsx","utils/equal/index.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","config/types.ts","config/app.ts","utils/browser/index.ts","library/open-window/index.ts","index.tsx","library/styled-bs-grid/media/media.ts","library/styled-bs-grid/config.ts","library/styled-bs-grid/components/Col/css.ts","library/styled-bs-grid/components/Col/Col.tsx","library/styled-bs-grid/utils/index.ts","library/styled-bs-grid/components/Container/Container.tsx","library/styled-bs-grid/components/Row/Row.tsx","library/styled-bs-grid/components/ThemeProvider/ThemeProvider.tsx"],"names":["gridGutterWidth","gridColumns","gridBreakpoints","xs","sm","md","lg","xl","xxl","containerMaxWidths","gridGutterWidthMedia","getSetupParam","console","log","JSON","stringify","nodeEnv","process","siteEnv","window","siteCode","version","gridConfig","toCapitalize","str","replace","$1","toUpperCase","setup","convertFieldType","key","field","type","default","toString","indexOf","Array","isArray","length","includes","undefined","newObjName","newObj","dataChild","convertField","modelName","jsonObj","constructor","fieldType","defaultValue","push","name","App","useForm","control","watch","jsonString","isUseCopyWith","useMemo","obj","parse","err","isJSON","gridTheme","className","col","render","style","width","height","value","data","reverse","toLowerCase","substr","map","row","join","renderDartModel","styled","textarea","Boolean","location","hostname","match","ESiteEnv","ECountry","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","malaysia","china","thailand","vietnam","indonesia","OpenWindow","prefixName","isMultipleOpen","openTargetId","targetWindow","this","createOpenTargetId","uniqueId","readyUrl","closeNoticeUrl","userAgent","navigator","test","checkIsIOS","href","open","url","close","e","openWindow","Intl","PluralRules","require","RelativeTimeFormat","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message","getBreakpoints","props","defaultTheme","get","theme","themeName","media","Object","keys","reduce","accumulator","label","strings","interpolations","css","replacePx2Vw","re","styleObj","offset","string","px","Number","isNaN","pixels","px2vw","column","colFlexBasis","generateMedia","filter","sizeName","isCheckNumber0","Date","trim","isEmpty","getCss","Col","div","attrs","getDataName","forwardRef","forwardAs","ref","as","Container","fluid","getRowMargin","noGutters","Row","GridThemeProvider","children","composeGridTheme","styledBsGrid","assign"],"mappings":"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","file":"static/js/main.a9da42b3.chunk.js","sourcesContent":["export {default as media} from './media';\nexport {default as Container} from './components/Container';\nexport {default as Row} from './components/Row';\nexport {default as Col} from './components/Col';\nexport {default as GridThemeProvider} from './components/ThemeProvider';\n\nexport * from './media/types';\nexport * from './components/Col/types';\nexport * from './components/Container/types';\nexport * from './components/Row/types';\nexport * from './components/ThemeProvider/types';\n","/**\n * bootstrap grid setting\n *\n * 單位值參考\n * row.padding === col.padding === container.padding\n *\n * 更改格數\n * import grid from \"config/grid\";\n *\n * <GridThemeProvider gridTheme={{\n *     ...grid,\n *     gridColumns: 35,\n *     gridGutterWidth: 3,\n * }}>\n */\n\nexport default {\n    gridGutterWidth: 5,\n    gridColumns: 24,\n    gridBreakpoints: {\n        xs: 0,\n        sm: 576,\n        md: 768,\n        lg: 992,\n        xl: 1200,\n        xxl: 1540,\n    },\n    containerMaxWidths: {\n        sm: 540,\n        md: 720,\n        lg: 960,\n        xl: 1140,\n        xxl: 1410,\n    },\n    gridGutterWidthMedia: {\n        sm: 5,\n        md: 5,\n        lg: 5,\n        xl: 10,\n        xxl: 15,\n    }\n};\n","import gridConfig from 'config/grid';\nimport {version} from '../../../package.json';\nimport {ESiteEnv} from 'config/types';\n\n\n\nfunction getSetupParam(){\n    console.log('info: ', JSON.stringify({\n        nodeEnv: process.env.NODE_ENV,\n        siteEnv: (window as any).siteEnv as ESiteEnv,\n        siteCode: (window as any).siteCode as string,\n        version: version,\n    }));\n\n    return {gridConfig};\n}\n\nexport default getSetupParam;\n","/**\n * 文本中的每個單詞以大寫字母開頭\n * @param str\n * @returns {string}\n */\nexport function toCapitalize(str: string) {\n    // return str.charAt(0).toUpperCase() + str.slice(1);\n    return str.replace(/\\b(\\w)/g, $1 => $1.toUpperCase());\n}\n\n/**\n * 語言代碼轉換 (en-us -> en-US)\n * @param str\n * @returns {string}\n */\nexport function lowerDashToLowerDashUpper(str: string) {\n    // eslint-disable-next-line no-useless-escape\n    const result = str.replace(/\\-(.*)/g, $1 => $1.toUpperCase());\n\n    // eslint-disable-next-line no-useless-escape\n    return result.replace(/(.*)+\\-/g, $1 => $1.toLowerCase());\n}\n\n\n/**\n * 大寫底線轉小駝峰\n * @param str\n */\nexport function upperLineToLowerCase(str: string) {\n    // eslint-disable-next-line no-useless-escape\n    return str.toLowerCase().replace(/\\_(\\w)/g, function(all, letter){\n        return letter.toUpperCase();\n    });\n}\n\n\n/**\n * 小駝峰轉大寫底線\n * @param str\n */\nexport function lowerCaseToUpLineCase(str: string): string {\n    return str.replace(/([A-Z])/g,'_$1').toUpperCase();\n}\n\n/**\n * 大駝峰轉大寫底線\n * @param str\n */\nexport function UpperCaseToLowerLineCase(str: string): string {\n    return str.replace(/([A-Z])/g,'_$1').toLowerCase().substr(1);\n}\n\n/**\n * RGB轉16進位\n * @param rgb\n * @returns {*}\n */\nexport function RGBToHex(rgb: string) {\n    const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n    const hex = function (x: any) {\n        // eslint-disable-next-line no-mixed-operators\n        return Number.isNaN(x) ? '00' : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];\n    };\n    const tmp: any = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    return hex(tmp[1]) + hex(tmp[2]) + hex(tmp[3]);\n}\n\n/**\n * HEX(16進位)色碼轉轉RGB\n * @param hex 色碼\n * @returns {*}\n */\nexport function HEXToRGB(hex: any) {\n    hex = hex.replace('#', '');\n    if (/^[0-9A-F]{3}$|^[0-9A-F]{6}$/.test(hex.toUpperCase())) {\n        if (hex.length === 3) {\n            hex = hex.match(/[0-9A-F]/g);\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        const r = parseInt(hex.substr(0, 2), 16);\n        const g = parseInt(hex.substr(2, 2), 16);\n        const b = parseInt(hex.substr(4, 2), 16);\n        return [r, g, b];\n    }\n    return hex;\n}\n\n/**\n * HEX(16進位)色碼轉RGBA\n * @param hex\n * @param opacity\n * @returns {Object|number[]}\n */\nexport function HEXToRGBAStr(hex: string, opacity = 1) {\n    const rgba = HEXToRGB(hex);\n    if (typeof rgba === 'object') {\n        return `rgba(${[...rgba, opacity].join(',')})`;\n    }\n    return [0, 0, 0, 1];\n\n}\n\n/**\n * 數字補0方法\n * @param val 原字串\n * @param length 補滿的目標长度\n * @returns {*}\n */\nexport function paddingLeft(val: string|number, length: number): string {\n    const replaceStr = String(val);\n    if (replaceStr.length < length) {\n        return paddingLeft(`0${replaceStr}`, length);\n    }\n    return replaceStr;\n}\n\n/**\n * 轉換外部Props資訊欄位與內部相同\n * @param obj 原物件\n * @param mapping 新物件Key Value\n * @returns {{}}\n */\nexport function autoMapper<A = object>(obj: object, mapping: object): A {\n    /*\n    範例:\n        const obj1 = {\n            firstName: 'Sam',\n            lastName: 'Xiao',\n            age: 20,\n        };\n\n        const obj2 = autoMapper(obj1, {\n            firstName: 'realName',\n            lastName: 'niceName',\n        });\n    */\n\n    // @ts-ignore\n    return Object.entries(obj).reduce((accm, [key, value]) => {accm[mapping[key] || key] = value;\n        return accm;\n    }, {});\n}\n\n\n/**\n * 反轉陣列\n * @param obj\n */\nexport function reverseObj(obj: {[key: string]: any}) {\n    return Object.entries(obj)\n        .reduce((prev, [key, value]) => {\n            return {...prev, [value]: key};\n        }, {});\n}\n\n\n\n\n\n/**\n * 將物件資料轉成 FormData\n * (若值為物件會被轉成JSON字串)\n * @param data\n */\nexport function obj2formData(data: any) {\n    const formData = new FormData();\n\n    const appendData = (whileData: any) => {\n        for(const [key, value] of Object.entries(whileData)){\n            if(Array.isArray(value)){\n                let i = 0;\n                for(const w of value){\n                    if(typeof w === 'object'){\n                        for(const [objKey, objVal] of Object.entries(w)){\n                            // @ts-ignore\n                            formData.append(`${key}[${i}][${objKey}]`, objVal);\n                        }\n                    }else{\n                        formData.append(`${key}[${i}]`, w);\n                    }\n                    i += 1;\n                }\n            }else if(typeof value !== 'undefined' && value !== null){\n                // @ts-ignore\n                formData.append(key, value);\n            }\n        }\n    };\n\n    appendData(data);\n    return formData;\n}\n\n\n\n/**\n * 過去陣列中不等於True的值\n *\n * (用於Table Checkbox取ID)\n * @param checkedId\n */\nexport function objFilterNotTrue2Array(checkedId: {\n    [id: number]: string| number\n}) {\n    const ids = [];\n    for(const id in checkedId){\n        // 過濾掉不等於 true 的 Key\n        if(checkedId[id]){\n            ids.push(Number(id));\n        }\n    }\n    return ids;\n}\n\n\n\n/**\n * 合併陣列中相同的Value\n * @param data\n */\nexport function mergeArraySameValue(data: any[]) {\n    // @ts-ignore\n    return [...(new Set(data))];\n}\n\n\n\n\n/**\n * 檔案轉 Base64\n * ref: https://stackoverflow.com/questions/15960508/javascript-async-readasdataurl-multiple-files/17370825\n * @param file\n */\nexport function fileConvertBase64(file: File): Promise<string|undefined>{\n    const reader = new FileReader();\n    return new Promise(resolve => {\n        reader.onload = ev => {\n            // @ts-ignore\n            resolve(ev.target.result);\n        };\n        reader.readAsDataURL(file);\n    });\n}\n","import styled, {ThemeProvider} from 'styled-components/macro';\nimport {Col, Container, GridThemeProvider, Row} from 'library/styled-bs-grid';\nimport getSetupParam from './setup';\nimport {Controller, useForm} from 'react-hook-form';\nimport {IFormData} from './types';\nimport {useMemo} from 'react';\nimport {isJSON} from 'utils/equal';\nimport {toCapitalize, UpperCaseToLowerLineCase} from '../../utils/format';\n\n\nconst setup = getSetupParam();\n\n\nconst convertFieldType = (key: string, field: any) => {\n\n    console.log('typeof field', typeof field, key);\n    if(field !== null) {\n        switch (typeof field) {\n            case 'boolean':\n                return {type: 'bool', default: false};\n\n            case 'number':\n                if (field.toString().indexOf('.') != -1) {\n                    return {type: 'double', default: 0};\n                }\n                return {type: 'int', default: 0};\n\n            case 'string':\n                return {type: 'String', default: `''`};\n\n            case 'object':\n                if(Array.isArray(field)){\n                    if(field.length > 0){\n                        if(['string','number','boolean'].includes((typeof field[0]))){\n                            return {type: 'List<String>', default: undefined};\n                        }\n                        return {type: `List<${toCapitalize(key)}>`, default: undefined, newObjName: toCapitalize(key), newObj: field[0]};\n                    }\n                    return {type: `List<dynamic>`, default: undefined};\n\n                }\n                return {type: toCapitalize(key), default: undefined, newObjName: toCapitalize(key), newObj: field};\n\n        }\n    }\n\n    return {type: 'dynamic', default: undefined};\n};\n\n\nlet dataChild: any[] = [];\n\nconst convertField = (modelName: string, jsonObj: any) => {\n    const constructor: string[] = [];\n    const field: string[] = [];\n    // const jsonObj = JSON.parse(jsonString);\n\n\n    if(typeof jsonObj === 'object'){\n        for (const key in jsonObj) {\n            // console.log(key, jsonObj[key]);\n            const fieldType = convertFieldType(key, jsonObj[key]);\n            const defaultValue = fieldType.default !== undefined ? ` = ${fieldType.default}`:'';\n            constructor.push(`       this.${key}${defaultValue},`);\n            field.push(`  ${fieldType.type}${fieldType.default === undefined && fieldType.type !== 'dynamic' ? '?':''} ${key};`);\n\n            if(fieldType.newObj !== undefined && fieldType.newObjName !== undefined){\n                convertField(fieldType.newObjName, fieldType.newObj);\n            }\n        }\n\n        dataChild.push({\n            name: modelName,\n            constructor: constructor,\n            field: field,\n        });\n    }\n\n    return dataChild;\n\n\n//     return `\n//   ${modelName}({\n// ${constructor.join('\\n')}\n//     });\n//\n// ${field.join('\\n')}\n//\n// `\n};\n\n\nconst App = () => {\n    const {control, watch} = useForm<IFormData>();\n\n    const [modelName, jsonString, isUseCopyWith] = watch(['modelName', 'jsonString', 'isUseCopyWith']);\n\n    let jsonObj = useMemo(() => {\n        if (isJSON(jsonString)) {\n            return JSON.parse(jsonString);\n        }\n    }, [jsonString]);\n\n\n    const renderDartModel = () => {\n        dataChild = [];\n        const data = convertField(modelName, jsonObj).reverse();\n\n        return `\n${isUseCopyWith ? 'import \\'package:copy_with_extension/copy_with_extension.dart\\';':''}\nimport 'package:json_annotation/json_annotation.dart';\n\npart '${UpperCaseToLowerLineCase(modelName)}.g.dart';\n\n${data.map(row => {\n            return `\n${isUseCopyWith ? '@CopyWith()':''}\n@JsonSerializable()\nclass ${row.name} {\n  ${row.name}({\n${row.constructor.join('\\n')}\n  });\n\n${row.field.join('\\n')} \n \n  /// JsonSerializable Build\n  factory ${row.name}.fromJson(Map<String, dynamic> json) => _$${row.name}FromJson(json);\n  Map<String, dynamic> toJson() => _$${row.name}ToJson(this);\n}\n`\n}).join('\\n')}\n\n    `;\n};\n\n\n    return (\n        <GridThemeProvider gridTheme={setup.gridConfig}>\n\n                <div className=\"text-center\">\n                    <h1>Json To Dart Model</h1>\n                </div>\n                <Container className=\"pt-3\">\n                    <Row>\n                        <Col col>\n                            <Row>\n                                <Col col={24}>\n                                    <Controller\n                                        control={control}\n                                        name=\"modelName\"\n                                        defaultValue=\"\"\n                                        render={({field}) => {\n                                            return (<input\n                                                style={{width: '100%'}}\n                                                type=\"text\"\n                                                {...field}\n                                            />);\n                                        }}\n                                    />\n\n                                </Col>\n                                <Col col={24}>\n                                    <Controller\n                                        control={control}\n                                        name=\"isUseCopyWith\"\n                                        defaultValue=\"\"\n                                        render={({field}) => {\n                                            return (<input\n                                                type=\"checkbox\"\n                                                {...field}\n                                            />);\n                                        }}\n                                    />\n                                     use CopyWith\n                                    <Controller\n                                        control={control}\n                                        name=\"jsonString\"\n                                        defaultValue=\"\"\n                                        render={({field}) => {\n                                            return (<textarea\n                                                style={{width: '100%', height: '100vh'}}\n                                                {...field}\n                                            />);\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n\n                        </Col>\n                        <Col col>\n                            <textarea\n                                style={{width: '100%', height: '100vh'}}\n                                value={renderDartModel()}\n                            />\n                        </Col>\n\n                    </Row>\n\n\n                </Container>\n        </GridThemeProvider>\n    );\n};\n\nexport default App;\n\n\nconst Console = styled.textarea`\n  position: fixed;\n  bottom: 0;\n  z-index: 99;\n  display: flex;\n  font-size: 10px;\n  border: none;\n  background: #1f1f1f;\n  color: #ccb444;\n  border-radius: 0;\n  width: 100%;\n  height: 60px;\n\n`;\n","import {IsNumberFn} from '../../library/styled-bs-grid/utils/types';\n\n\nexport const reg = {\n    number: /^[\\d]*$/,\n    email: /^[A-Za-z0-9._-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/,\n};\n\n\n\n/**\n * 判定是否為空\n * @param value\n * @param checkOption\n * @returns {boolean}\n */\nexport function isEmpty(value: any, checkOption?: {\n    isZero?: boolean,\n    isFalse?: boolean,\n}) {\n    const defaultCheckOption = {\n        isZero: checkOption?.isZero ?? false,\n        isFalse: checkOption?.isFalse ?? true,\n    };\n    return (\n        value === undefined\n        || value === null\n        || (defaultCheckOption.isFalse && (value === false || value === 'false'))\n        || (defaultCheckOption.isZero && value === 0)\n        || (!(value instanceof Date) && typeof value === 'object' && Object.keys(value).length === 0)\n        || (typeof value === 'string' && value.trim().length === 0)\n    );\n}\n\n/**\n * 判定是否不為空\n * @param value\n * @param checkOption\n * @returns {boolean}\n */\nexport function isNotEmpty(value: any, checkOption?: {\n    isZero?: boolean,\n    isFalse?: boolean,\n}) {\n    const defaultCheckOption = {\n        isZero: checkOption?.isZero ?? false,\n        isFalse: checkOption?.isFalse ?? true,\n    };\n    return !isEmpty(value, defaultCheckOption);\n}\n\nexport const isNumber: IsNumberFn = value => !Number(value) !== true;\n\n\n/**\n * 驗證日期格式為 YYYY-MM-DD\n * @param str\n * @returns {boolean}\n */\nexport function isDate(str: string) {\n    const re = new RegExp('^([0-9]{4})[.-]{1}([0-9]{1,2})[.-]{1}([0-9]{1,2})$');\n    let infoValidation = true;\n\n    const strDataValue = re.exec(str);\n    if (strDataValue !== null) {\n        let i;\n        i = parseFloat(strDataValue[1]);\n        if (i <= 0 || i > 9999) {\n            /* 年 */\n            infoValidation = false;\n        }\n        i = parseFloat(strDataValue[2]);\n        if (i <= 0 || i > 12) {\n            /* 月 */\n            infoValidation = false;\n        }\n        i = parseFloat(strDataValue[3]);\n        if (i <= 0 || i > 31) {\n            /* 日 */\n            infoValidation = false;\n        }\n    } else {\n        infoValidation = false;\n    }\n    return infoValidation;\n}\n\n/**\n * 判斷是否為IP\n * @param ip\n * @returns {boolean}\n */\nexport function isIp(ip: string) {\n    const reg = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;\n    // @ts-ignore\n    if (reg.test(ip) && RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * 判斷是否為JSON\n * @param jsonString string\n * @returns {boolean}\n */\nexport function isJSON(jsonString: string) {\n    try {\n        const obj = JSON.parse(jsonString);\n        if (obj && typeof obj === 'object' && obj !== null) {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n    return false;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export enum ESiteEnv {'dev'='dev', 'stage'='stage', 'prod'='prod'}\nexport enum ECountry {'malaysia'='malaysia', 'china'='china', 'vietnam'='vietnam', 'thailand'='thailand', 'indonesia'='indonesia'}\n\n","import {ECountry} from './types';\n\nconst routePrefixPath = '';\n\nconst clientId = '354C967A20E44811B4D9EF0802CC52F3';\n\n// 時區識別代號\nconst timezoneCode = {\n    [ECountry.malaysia]: 'Asia/Kuching',\n    [ECountry.china]: 'Asia/Shanghai',\n    [ECountry.thailand]: 'Asia/Bangkok',\n    [ECountry.vietnam]: 'Asia/Ho_Chi_Minh',\n    [ECountry.indonesia]: 'Asia/Jakarta',\n};\n\nexport {\n    clientId,\n    routePrefixPath,\n    timezoneCode,\n\n};\n","import gridConfig from 'config/grid';\n\n/**\n * 判斷是否為手機裝置\n */\nexport function checkIsMobile() {\n    try { document.createEvent('TouchEvent'); return true; } catch (e) { return false; }\n}\n\n/**\n * 判斷是否為IOS\n * @returns {boolean}\n */\nexport function checkIsIOS() {\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    return /iphone|ipad|ipod/.test(userAgent);\n}\n\n/**\n * 判斷是否為IE瀏覽器\n * @returns {boolean}\n */\nexport function checkIsIE() {\n    // @ts-ignore\n    return (!!window.ActiveXObject || 'ActiveXObject' in window);\n}\n\n/**\n * 判斷是否為LINE瀏覽器\n * @returns {boolean}\n */\nexport function checkIsLine() {\n    const u = navigator.userAgent;\n    return u.includes('Line');\n}\n\n/**\n * 判斷是否為FB瀏覽器\n * @returns {boolean}\n */\nexport function checkIsFacebook() {\n    const u = navigator.userAgent;\n    return u.includes('FBAV');\n}\n\n/**\n * 判斷是否為微信瀏覽器\n * @returns {boolean}\n */\nexport function checkIsWechat() {\n    const ua = navigator.userAgent.toLowerCase();\n    // @ts-ignore\n    return ua.match(/MicroMessenger/i) === 'micromessenger';\n}\n\n/**\n * 判斷是否為Safari\n * @returns {boolean}\n */\nexport function checkIsSafari() {\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    return userAgent.includes('safari') && !userAgent.includes('chrome');\n}\n\n/**\n * 判斷是否為PWA模式\n * @returns {boolean}\n */\nexport function checkIsPWA() {\n    // @ts-ignore\n    return ('standalone' in window.navigator) && (window.navigator.standalone);\n}\n\n/**\n * 滾動條在Y軸上的滾動距離\n * @returns {number}\n */\nexport function getScrollTop() {\n    let scrollTop = 0; let bodyScrollTop = 0; let\n        documentScrollTop = 0;\n    if (document.body) {\n        bodyScrollTop = document.body.scrollTop;\n    }\n    if (document.documentElement) {\n        documentScrollTop = document.documentElement.scrollTop;\n    }\n    scrollTop = (bodyScrollTop - documentScrollTop > 0) ? bodyScrollTop : documentScrollTop;\n    return scrollTop;\n}\n\n/**\n * 文檔的總高度\n * @returns {*|number}\n */\nexport function getScrollHeight() {\n    let scrollHeight = 0; let bodyScrollHeight = 0; let\n        documentScrollHeight = 0;\n    if (document.body) {\n        bodyScrollHeight = document.body.scrollHeight;\n    }\n    if (document.documentElement) {\n        documentScrollHeight = document.documentElement.scrollHeight;\n    }\n    scrollHeight = (bodyScrollHeight - documentScrollHeight > 0) ? bodyScrollHeight : documentScrollHeight;\n    return scrollHeight;\n}\n\n/**\n * 瀏覽器顯示的高度\n * @returns {number}\n */\nexport function getWindowHeight() {\n    let windowHeight = 0;\n    if (document.compatMode === 'CSS1Compat') {\n        windowHeight = document.documentElement.clientHeight;\n    } else {\n        windowHeight = document.body.clientHeight;\n    }\n    return windowHeight;\n}\n\n\n/**\n * 取得目前瀏覽器寬度的RWD尺寸代號\n */\nexport const checkIsMobileByGridSize = () => {\n    const width = window.innerWidth;\n    let currentSize = 'xs';\n    let size: 'xs'|'sm'|'md'|'lg'|'xl'|'xxl';\n    for(size in gridConfig.gridBreakpoints){\n\n        // ex: 340 => 0(xs)\n        //     800 => 768(md)\n        if(width >= gridConfig.gridBreakpoints[size]){\n            currentSize = size;\n        }else{\n            break;\n        }\n    }\n\n    switch (currentSize) {\n    case 'xs':\n    case 'sm':\n        return 'mobile';\n    case 'md':\n    case 'lg':\n        return 'pad';\n    default:\n        return 'pc';\n    }\n\n};\n\n","import uniqueId from 'lodash/uniqueId';\nimport {routePrefixPath} from 'config/app';\nimport {checkIsIOS} from 'utils/browser';\n\n/**\n * 開啟視窗功能\n * mobile\n *  > ios safari      : 當有非同步發生時, 不可以接著 window.open, 會被 safari 認定不安全而錯誤\n *                      所以需要新開一個 about:black 視窗 (命名ID), 在導頁到目標ID。\n *  > android: chrome : 因配合 ios safari 的情況, 所以直接使用 ios safari 方案避免相同性問題。\n *\n * PS: 開啟的子視窗, 需注意跨域問題, 若開啟的網域與父視窗不同, 則無法再控制(包含覆蓋原本的視窗)\n *\n * @param prefixName     命名前輟ID名稱\n * @param isMultipleOpen 是否需要可以多開子視窗\n * @returns {boolean}\n */\nexport default class OpenWindow {\n    openTargetId: string;\n    isMultipleOpen: boolean;\n    targetWindow: any;\n    prefixName: string;\n\n\n    constructor(prefixName: string, isMultipleOpen: boolean) {\n        this.prefixName = prefixName;\n        this.openTargetId = this.createOpenTargetId();\n        this.isMultipleOpen = isMultipleOpen;\n        this.targetWindow = null;\n    }\n\n    createOpenTargetId(){\n        return uniqueId(`${this.prefixName}_`);\n    }\n\n    /**\n     * 準備開啟視窗的前置作業\n     */\n    ready(){\n        const readyUrl = `${routePrefixPath}/static/plugins/loading-window/index.html`;\n        const closeNoticeUrl = `${routePrefixPath}/static/plugins/loading-window/close.html`;\n\n        if(checkIsIOS() && this.targetWindow){\n            // iOS Safari 先切換到 關閉提示頁面, 在開啟新的準備視窗\n            this.targetWindow.location.href = closeNoticeUrl;\n            this.openTargetId = this.createOpenTargetId();\n\n        }else if(this.isMultipleOpen){\n            // 多開模式需要使用不同ID\n            this.openTargetId = this.createOpenTargetId();\n\n        }\n\n        // 開啟準備視窗\n        this.targetWindow = window.open(readyUrl, this.openTargetId);\n    }\n\n    /**\n     * 開啟視窗\n     * @param url 開啟目標的Url\n     */\n    open(url: string){\n        // 單一顯示模式中, 如果子視窗未關閉, 則使用子視窗導頁\n        if(!this.isMultipleOpen && this.targetWindow){\n            this.targetWindow.location.href = url;\n        }else{\n            window.open(url, this.openTargetId);\n        }\n    }\n\n    /**\n     * 關閉視窗\n     */\n    close() {\n        try{\n            this.targetWindow.close();\n\n        }catch (e) {\n            console.log('open-window: window close error');\n        }\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport OpenWindow from './library/open-window';\n\n\n\ndeclare global {\n    interface Window {\n        openWindow: any;\n    }\n}\n\n// 免轉錢包: 只能開一個視窗, 中心錢包: 多開視窗\nwindow.openWindow = new OpenWindow('startLobbyWindow', false);\n\n\nif (!Intl.PluralRules) {\n    require('@formatjs/intl-pluralrules/polyfill');\n    require('@formatjs/intl-pluralrules/locale-data/en'); // Add locale data for de\n    require('@formatjs/intl-pluralrules/locale-data/zh'); // Add locale data for de\n}\n\n// @ts-ignore\nif (!Intl.RelativeTimeFormat) {\n    require('@formatjs/intl-relativetimeformat/polyfill');\n    require('@formatjs/intl-relativetimeformat/locale-data/en'); // Add locale data for de\n    require('@formatjs/intl-relativetimeformat/locale-data/zh'); // Add locale data for de\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {css, FlattenSimpleInterpolation} from 'styled-components/macro';\nimport get from 'lodash/get';\nimport {themeName, defaultTheme} from '../config';\n\nconst getBreakpoints = (props: any) => ({\n    ...defaultTheme.gridBreakpoints,\n    ...get(props.theme[themeName], 'gridBreakpoints', {}),\n});\n\nconst media: any = Object.keys(defaultTheme.gridBreakpoints).reduce(\n    (accumulator, label) => {\n        const minMedia = (strings: any, ...interpolations: any) => css`\n              @media (min-width: ${(props: any) => getBreakpoints(props)[label]}px) {\n                ${css(strings, ...interpolations)};\n              }\n        `;\n        // @ts-ignore\n        accumulator[label] = minMedia;\n        return accumulator;\n    },\n    {},\n);\n\nfunction px2vw(pixels: number, pixelTotal: number = 320) {\n    return `${(pixels / pixelTotal) * 100}vw`;\n}\n\nconst replacePx2Vw = (css: FlattenSimpleInterpolation) => {\n    let re = /(\\d+)+(px)/gi;\n\n    return css.map(styleObj =>{\n        if(typeof styleObj === 'string'){\n            return styleObj.replace(re, (match, offset, string) => {\n                const px = Number(offset);\n                if(px === 0){\n                    return '0';\n                }else if(!isNaN(px)){\n                    return px2vw(px);\n                }\n                return match;\n            });\n        }\n        return styleObj;\n    });\n};\n\nmedia.px2vw = (strings: any, ...interpolations: any) => css`\n      @media (max-width: ${(props: any) => getBreakpoints(props).sm}px) {\n          ${replacePx2Vw(css(strings, ...interpolations))};\n      }\n`;\n\nexport default media;\n","/**\n * Library Default Setting\n *\n * ps: please check your project setting `src/config/grid.ts`\n */\n\nexport const themeName = 'styledBsGrid';\nexport const defaultTheme = {\n    gridGutterWidth: 10,\n    gridColumns: 24,\n    gridBreakpoints: {\n        xs: 0,\n        sm: 576,\n        md: 768,\n        lg: 992,\n        xl: 1200,\n        xxl: 1920,\n    },\n    containerMaxWidths: {\n        sm: 540,\n        md: 720,\n        lg: 960,\n        xl: 1140,\n        xxl: 1860,\n    },\n    gridGutterWidthMedia: {\n        sm: 10,\n        md: 10,\n        lg: 10,\n        xl: 10,\n        xxl: 10,\n    }\n};\n","import {ColCss} from './types';\n\nconst css: ColCss = {\n    col: (column: any, gridColumns: number) => {\n        let colFlexBasis = 0;\n\n        switch (column) {\n        case true:\n            return `\n          -ms-flex-preferred-size: 0;\n          -ms-flex-positive: 1;\n          flex-basis: 0;\n          flex-grow: 1;\n          max-width: 100%;\n        `;\n        case 'auto':\n            return `\n          -ms-flex: 0 0 auto;\n          flex: 0 0 auto;\n          width: auto;\n          max-width: none;\n        `;\n        default:\n            colFlexBasis = (100 / gridColumns) * column;\n            return `\n            -ms-flex: 0 0 ${colFlexBasis}%;\n            flex: 0 0 ${colFlexBasis}%;\n            max-width: ${colFlexBasis}%;\n        `;\n        }\n    },\n};\n\nexport default css;\n","import React from 'react';\nimport styled, {css} from 'styled-components/macro';\n\nimport getCss from './css';\nimport getDataName from './getDataName';\nimport media from '../../media';\nimport {isEmpty} from '../../utils';\nimport {themeName} from '../../config';\nimport {ColProps} from './types';\nimport {themeProps} from '../ThemeProvider/types';\n\ntype Props = ColProps & {\n    theme: themeProps;\n};\n\n// eslint-disable-next-line array-callback-return\nconst generateMedia = (props: any) => Object\n    .keys(props.theme[themeName].gridBreakpoints)\n    .filter(sizeName => sizeName !== 'xs')\n    .map(sizeName => {\n        return media[sizeName]`\n             padding-right: ${props.theme[themeName].gridGutterWidthMedia[sizeName]}px;\n             padding-left: ${props.theme[themeName].gridGutterWidthMedia[sizeName]}px;\n\n            ${!isEmpty(props[sizeName]) && css`\n                ${getCss.col(props[sizeName], props.theme[themeName].gridColumns)};\n            `}\n    `;\n    });\n\n/**\n * Col Component\n * breakpoints sort: sm => xl\n *\n * qa: min-height=1px\n * https://css-tricks.com/make-sure-columns-dont-collapse-horizontally/\n *\n */\nconst Col: any = styled.div.attrs((props: Props) => ({\n    'data-grid': 'col',\n    'data-debug': getDataName(props),\n}))`\n  position: relative;\n  width: 100%;\n  min-height: 1px;\n\n  ${(props: any) => css`\n     padding-right: ${props.theme[themeName].gridGutterWidth}px;\n     padding-left: ${props.theme[themeName].gridGutterWidth}px;\n\n     >[data-grid=row]{\n        flex: 0 1 100%;\n    }\n\n     min-width: 0; // 解決下層有使用 white-space: nowrap; 產生衝突跑版\n     ${props.col && getCss.col(props.col, props.theme[themeName].gridColumns)};\n\n     ${generateMedia(props)};\n `}\n`;\n\nexport default ({forwardRef, forwardAs, ...props}: ColProps) => <Col ref={forwardRef} as={forwardAs} {...props}/>;\n","import {IsNumberFn, SuffixFn} from './types';\n\nexport const isNumber: IsNumberFn = value => !Number(value) !== true;\nexport const suffix: SuffixFn = value => {\n    if (isNumber(value)) {\n        return `-${value}`;\n    } if (value === 'auto') {\n        return '-auto';\n    }\n    return '';\n};\nexport const isEmpty = (value: any, isCheckNumber0 = false) => (\n    value === undefined\n        || value === null\n        || value === false\n        || (isCheckNumber0 && value === 0)\n        || (!(value instanceof Date) && typeof value === 'object' && Object.keys(value).length === 0)\n        || (typeof value === 'string' && value.trim().length === 0)\n);\n","import React from 'react';\nimport styled, {css} from 'styled-components/macro';\nimport {ContainerProps} from './types';\n\nimport {themeName} from '../../config';\nimport media from '../../media';\nimport getDataName from './getDataName';\n\nconst generateMedia = (props: any) => Object.keys(props.theme[themeName].gridBreakpoints)\n    .map(sizeName => {\n        if (props.theme[themeName].gridBreakpoints[sizeName] > 0) {\n            return media[sizeName]`\n                max-width: ${props.theme[themeName].containerMaxWidths[sizeName]}px;\n            `;\n        }\n        return false;\n    })\n    .filter(row => row !== false);\n;\n\n/**\n * Row Component\n */\nconst Container: any = styled.div.attrs((props: ContainerProps) => ({\n    'data-grid': 'container',\n    'data-debug': getDataName(props),\n}))`\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n\n  ${(props: any) => css`\n     padding-right: ${props.theme[themeName].gridGutterWidth}px;\n     padding-left: ${props.theme[themeName].gridGutterWidth}px;\n\n     ${!props.fluid && css`\n        ${generateMedia(props)};\n    `}\n `}\n`;\n\nexport default (props: ContainerProps) => <Container {...props}/>;\n","import React from 'react';\nimport styled, {css} from 'styled-components/macro';\nimport getDataName from './getDataName';\nimport {themeName} from '../../config';\nimport {RowProps} from './types';\nimport media from '../../media';\n\n/**\n * Get Row Margin\n * @param props\n * @returns {*}\n */\nconst getRowMargin = (props: any) => (props.noGutters ? 0 : `-${props.theme[themeName].gridGutterWidth}px`);\n\nconst generateMedia = (props: any) => Object.keys(props.theme[themeName].gridBreakpoints)\n    .map(sizeName => {\n        if (props.theme[themeName].gridBreakpoints[sizeName] > 0) {\n            return media[sizeName]`\n                margin-left: -${props.theme[themeName].gridGutterWidthMedia[sizeName]}px;\n                margin-right: -${props.theme[themeName].gridGutterWidthMedia[sizeName]}px;\n            `;\n        }\n        return false;\n    })\n    .filter(row => row !== false);\n;\n\n/**\n * Row Component\n */\nconst Row: any = styled.div.attrs((props: any) => ({\n    'data-grid': 'row',\n    'data-debug': getDataName(props),\n}))`\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n\n  ${(props: any) => css`\n     margin-right: ${getRowMargin(props)};\n     margin-left: ${getRowMargin(props)};\n\n     // ps: 設定會 width 100% 會產生 margin 抵銷失敗\n\n\n     ${!props.noGutters && css`\n        ${generateMedia(props)}\n     `}\n\n     ${props.noGutters && css`\n        >[data-grid=col]{\n            padding-right: 0;\n            padding-left: 0;\n        }\n     `}\n `}\n`;\n\nexport default ({forwardAs, ...props}: RowProps) => <Row as={forwardAs} {...props}/>;\n\n","import React from 'react';\nimport {ThemeProvider} from 'styled-components/macro';\nimport {defaultTheme} from '../../config';\nimport {themeProps} from './types';\n\nconst GridThemeProvider = (props: themeProps) => {\n    const {gridTheme = {}, children} = props;\n\n    const composeGridTheme = {styledBsGrid: Object.assign({}, defaultTheme, gridTheme)};\n\n    return <ThemeProvider theme={composeGridTheme}>{children}</ThemeProvider>;\n};\n\nexport default GridThemeProvider;\n"],"sourceRoot":""}